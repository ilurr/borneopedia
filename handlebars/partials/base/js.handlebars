<script type="text/javascript" src="../asset/js/jquery.min.js"></script>
<script type="text/javascript" src="../asset/js/bootstrap.min.js"></script>
<script type="text/javascript" src="../asset/js/plugin-pack.js"></script>
<script type="text/javascript" src="../asset/js/main.js"></script>
<script>
// tinymce
let plugins = 'emoticons lists image wordcount';
let toolbar = 'bold italic | bullist | image';
tinymce.init({
	selector: '.tinymce-textarea',
	menubar: false,
	placeholder: 'Write here',
	statusbar: false,
	min_height: 285,
	plugins: plugins,
	toolbar: toolbar,
	content_style: 'img { max-width: 100%; width: auto; height: auto }', // update agustus 2021
	automatic_uploads: true,
	file_picker_types: 'image',
	file_picker_callback: function (cb, value, meta) {
		var input = document.createElement('input');
		input.setAttribute('type', 'file');
		input.setAttribute('accept', 'image/*');

		/*
		Note: In modern browsers input[type="file"] is functional without
		even adding it to the DOM, but that might not be the case in some older
		or quirky browsers like IE, so you might want to add it to the DOM
		just in case, and visually hide it. And do not forget do remove it
		once you do not need it anymore.
		*/

		input.onchange = function () {
			var file = this.files[0];

			var reader = new FileReader();
			reader.onload = function () {
				/*
					Note: Now we need to register the blob in TinyMCEs image blob
					registry. In the next release this part hopefully won't be
					necessary, as we are looking to handle it internally.
				*/
				var id = 'blobid' + (new Date()).getTime();
				var blobCache =  tinymce.activeEditor.editorUpload.blobCache;
				var base64 = reader.result.split(',')[1];
				var blobInfo = blobCache.create(id, file, base64);
				blobCache.add(blobInfo);

				/* call the callback and populate the Title field with the file name */
				cb(blobInfo.blobUri(), { title: file.name });
			};
			reader.readAsDataURL(file);
		};

		input.click();
	},
	setup: function(editor) {
		editor.on('keyup', function(e) {
			var wordcount = tinymce.activeEditor.plugins.wordcount;
			var words = wordcount.body.getCharacterCount();
			var rem = document.getElementById('postRemainingNeoblog');
			if(rem) {
				rem.innerHTML = words;
			}
			if(words > 0) {
				document.getElementById('neoblog-button-add-draft').removeAttribute('disabled');
			} else {
				document.getElementById('neoblog-button-add-draft').setAttribute('disabled','disabled');
			}
			if(words > 125) {
				document.getElementById('neoblog-button-add').removeAttribute('disabled');
			} else {
				document.getElementById('neoblog-button-add').setAttribute('disabled','disabled');
			}
		});
	}
});
tinymce.init({
	selector: '.tinymce-inline',
	menubar: false,
	placeholder: 'Answer here',
	statusbar: false,
	min_height: 100,
	plugins: plugins,
	toolbar: toolbar,
	content_style: 'img { max-width: 100%; width: auto; height: auto }', // update agustus 2021
	setup: function(editor) {
		editor.on('keyup', function(e) {
			var wordcount = tinymce.activeEditor.plugins.wordcount;
			var words = wordcount.body.getCharacterCount();
			var parent = document.getElementById(editor.id).closest('.post-inline')
			if(words > 0) {
				parent.querySelector('.inline-button-draft').removeAttribute('disabled');
			} else {
				parent.querySelector('.inline-button-draft').setAttribute('disabled','disabled');
			}
			if(words > 50) {
				parent.querySelector('.inline-button-post').removeAttribute('disabled');
			} else {
				parent.querySelector('.inline-button-post').setAttribute('disabled','disabled');
			}
			
		});
	}
});

// modal
$('#modalNeoblogAdd').on('show.bs.modal', function () {
	$('#modalNavAdd').modal('hide');
});
$('#modalNeoblogAdd').on('shown.bs.modal', function () {
	$(document).off('focusin.modal');
	tinymce.get('neoblog-textarea-add').focus();
});
$('#modalQnaAdd').on('show.bs.modal', function () {
	$('#modalNavAdd').modal('hide');
});
// show modal login to limit content | update agustus 2021
$(document).on('click','.button-limit', function (e) {
	e.preventDefault();
	$('#modalLogin').find('.modal-content').before('<div class="modal-limit-info">Sign in to continue</div>')
	$('#modalLogin').addClass('modal-limit');
	$('#modalLogin').modal('show');
});
$('#modalLogin').on('hidden.bs.modal', function () {
	if($(this).hasClass('modal-limit')) {
		$(this).removeClass('modal-limit');
		$(this).find('.modal-limit-info').remove();
	}
});
  
// mention 
var tribute = new Tribute({
  values: [
  {{#each people}}
  {{#or qna neoblog figure}}
    { key: "{{first_name}} {{last_name}}", value: "@{{first_name}} {{last_name}}" },
	{{/or}}
	{{/each}}
  ],
    selectTemplate: function(item) {
    return (
      '<span class="at" contenteditable="false">' + item.original.value + '</span>'
    );
  }
});
// attach element
tribute.attach(document.querySelectorAll(".js-mentionable"));

// copy to textarea
let textareaContent = document.getElementById('qna-textarea-add');
let editableContent = document.getElementById('qna-contenteditable-add');
if(!!editableContent) {
	editableContent.addEventListener('click', function(e){
		// add ? marks
		if(editableContent.innerHTML == 0) {
			insertTextAtCaret('?');
		}
	});
	editableContent.addEventListener('input', function(e){
		if(!!textareaContent) {
			textareaContent.value = editableContent.innerHTML;
		}
	});
}

function insertTextAtCaret(text) {
    let selection = window.getSelection();
    let range = selection.getRangeAt(0);
    range.deleteContents();
    let node = document.createTextNode(text);
    range.insertNode(node);

    for(let position = 0; position != text.length; position++)
    {
        selection.modify("move", "left", "character");
    };
}

</script>
